/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tul.salutem.entity.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import tul.salutem.entity.model.Patient;
import tul.salutem.entity.model.PatientModel;
import tul.salutem.entity.model.PatientSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Patient service. Represents a row in the &quot;salutem_Patient&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link tul.salutem.entity.model.PatientModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatientImpl}.
 * </p>
 *
 * @author Aneta Andrzejewska
 * @see PatientImpl
 * @see tul.salutem.entity.model.Patient
 * @see tul.salutem.entity.model.PatientModel
 * @generated
 */
@JSON(strict = true)
public class PatientModelImpl extends BaseModelImpl<Patient>
	implements PatientModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a patient model instance should use the {@link tul.salutem.entity.model.Patient} interface instead.
	 */
	public static final String TABLE_NAME = "salutem_Patient";
	public static final Object[][] TABLE_COLUMNS = {
			{ "patientId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "confirmingUserId", Types.BIGINT },
			{ "confirmingUserName", Types.VARCHAR },
			{ "isConfirmed", Types.BOOLEAN },
			{ "name", Types.VARCHAR },
			{ "surname", Types.VARCHAR },
			{ "middleName", Types.VARCHAR },
			{ "pesel", Types.INTEGER },
			{ "idNumber", Types.VARCHAR },
			{ "idImage", Types.VARCHAR },
			{ "birthDate", Types.TIMESTAMP },
			{ "sex", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "cityName", Types.VARCHAR },
			{ "bloodType", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table salutem_Patient (patientId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,confirmingUserId LONG,confirmingUserName VARCHAR(75) null,isConfirmed BOOLEAN,name VARCHAR(75) null,surname VARCHAR(75) null,middleName VARCHAR(75) null,pesel INTEGER,idNumber VARCHAR(75) null,idImage VARCHAR(75) null,birthDate DATE null,sex VARCHAR(75) null,address VARCHAR(75) null,cityName VARCHAR(75) null,bloodType VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table salutem_Patient";
	public static final String ORDER_BY_JPQL = " ORDER BY patient.patientId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY salutem_Patient.patientId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.tul.salutem.entity.model.Patient"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.tul.salutem.entity.model.Patient"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.tul.salutem.entity.model.Patient"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long PATIENTID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Patient toModel(PatientSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Patient model = new PatientImpl();

		model.setPatientId(soapModel.getPatientId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setConfirmingUserId(soapModel.getConfirmingUserId());
		model.setConfirmingUserName(soapModel.getConfirmingUserName());
		model.setIsConfirmed(soapModel.getIsConfirmed());
		model.setName(soapModel.getName());
		model.setSurname(soapModel.getSurname());
		model.setMiddleName(soapModel.getMiddleName());
		model.setPesel(soapModel.getPesel());
		model.setIdNumber(soapModel.getIdNumber());
		model.setIdImage(soapModel.getIdImage());
		model.setBirthDate(soapModel.getBirthDate());
		model.setSex(soapModel.getSex());
		model.setAddress(soapModel.getAddress());
		model.setCityName(soapModel.getCityName());
		model.setBloodType(soapModel.getBloodType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Patient> toModels(PatientSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Patient> models = new ArrayList<Patient>(soapModels.length);

		for (PatientSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.tul.salutem.entity.model.Patient"));

	public PatientModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _patientId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPatientId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _patientId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Patient.class;
	}

	@Override
	public String getModelClassName() {
		return Patient.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("patientId", getPatientId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("confirmingUserId", getConfirmingUserId());
		attributes.put("confirmingUserName", getConfirmingUserName());
		attributes.put("isConfirmed", getIsConfirmed());
		attributes.put("name", getName());
		attributes.put("surname", getSurname());
		attributes.put("middleName", getMiddleName());
		attributes.put("pesel", getPesel());
		attributes.put("idNumber", getIdNumber());
		attributes.put("idImage", getIdImage());
		attributes.put("birthDate", getBirthDate());
		attributes.put("sex", getSex());
		attributes.put("address", getAddress());
		attributes.put("cityName", getCityName());
		attributes.put("bloodType", getBloodType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long patientId = (Long)attributes.get("patientId");

		if (patientId != null) {
			setPatientId(patientId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long confirmingUserId = (Long)attributes.get("confirmingUserId");

		if (confirmingUserId != null) {
			setConfirmingUserId(confirmingUserId);
		}

		String confirmingUserName = (String)attributes.get("confirmingUserName");

		if (confirmingUserName != null) {
			setConfirmingUserName(confirmingUserName);
		}

		Boolean isConfirmed = (Boolean)attributes.get("isConfirmed");

		if (isConfirmed != null) {
			setIsConfirmed(isConfirmed);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String surname = (String)attributes.get("surname");

		if (surname != null) {
			setSurname(surname);
		}

		String middleName = (String)attributes.get("middleName");

		if (middleName != null) {
			setMiddleName(middleName);
		}

		Integer pesel = (Integer)attributes.get("pesel");

		if (pesel != null) {
			setPesel(pesel);
		}

		String idNumber = (String)attributes.get("idNumber");

		if (idNumber != null) {
			setIdNumber(idNumber);
		}

		String idImage = (String)attributes.get("idImage");

		if (idImage != null) {
			setIdImage(idImage);
		}

		Date birthDate = (Date)attributes.get("birthDate");

		if (birthDate != null) {
			setBirthDate(birthDate);
		}

		String sex = (String)attributes.get("sex");

		if (sex != null) {
			setSex(sex);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String cityName = (String)attributes.get("cityName");

		if (cityName != null) {
			setCityName(cityName);
		}

		String bloodType = (String)attributes.get("bloodType");

		if (bloodType != null) {
			setBloodType(bloodType);
		}
	}

	@JSON
	@Override
	public long getPatientId() {
		return _patientId;
	}

	@Override
	public void setPatientId(long patientId) {
		_patientId = patientId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getConfirmingUserId() {
		return _confirmingUserId;
	}

	@Override
	public void setConfirmingUserId(long confirmingUserId) {
		_confirmingUserId = confirmingUserId;
	}

	@Override
	public String getConfirmingUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getConfirmingUserId(), "uuid",
			_confirmingUserUuid);
	}

	@Override
	public void setConfirmingUserUuid(String confirmingUserUuid) {
		_confirmingUserUuid = confirmingUserUuid;
	}

	@JSON
	@Override
	public String getConfirmingUserName() {
		if (_confirmingUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _confirmingUserName;
		}
	}

	@Override
	public void setConfirmingUserName(String confirmingUserName) {
		_confirmingUserName = confirmingUserName;
	}

	@JSON
	@Override
	public boolean getIsConfirmed() {
		return _isConfirmed;
	}

	@Override
	public boolean isIsConfirmed() {
		return _isConfirmed;
	}

	@Override
	public void setIsConfirmed(boolean isConfirmed) {
		_isConfirmed = isConfirmed;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getSurname() {
		if (_surname == null) {
			return StringPool.BLANK;
		}
		else {
			return _surname;
		}
	}

	@Override
	public void setSurname(String surname) {
		_surname = surname;
	}

	@JSON
	@Override
	public String getMiddleName() {
		if (_middleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _middleName;
		}
	}

	@Override
	public void setMiddleName(String middleName) {
		_middleName = middleName;
	}

	@JSON
	@Override
	public int getPesel() {
		return _pesel;
	}

	@Override
	public void setPesel(int pesel) {
		_pesel = pesel;
	}

	@JSON
	@Override
	public String getIdNumber() {
		if (_idNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _idNumber;
		}
	}

	@Override
	public void setIdNumber(String idNumber) {
		_idNumber = idNumber;
	}

	@JSON
	@Override
	public String getIdImage() {
		if (_idImage == null) {
			return StringPool.BLANK;
		}
		else {
			return _idImage;
		}
	}

	@Override
	public void setIdImage(String idImage) {
		_idImage = idImage;
	}

	@JSON
	@Override
	public Date getBirthDate() {
		return _birthDate;
	}

	@Override
	public void setBirthDate(Date birthDate) {
		_birthDate = birthDate;
	}

	@JSON
	@Override
	public String getSex() {
		if (_sex == null) {
			return StringPool.BLANK;
		}
		else {
			return _sex;
		}
	}

	@Override
	public void setSex(String sex) {
		_sex = sex;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getCityName() {
		if (_cityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _cityName;
		}
	}

	@Override
	public void setCityName(String cityName) {
		_cityName = cityName;
	}

	@JSON
	@Override
	public String getBloodType() {
		if (_bloodType == null) {
			return StringPool.BLANK;
		}
		else {
			return _bloodType;
		}
	}

	@Override
	public void setBloodType(String bloodType) {
		_bloodType = bloodType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Patient.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Patient toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Patient)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PatientImpl patientImpl = new PatientImpl();

		patientImpl.setPatientId(getPatientId());
		patientImpl.setGroupId(getGroupId());
		patientImpl.setCompanyId(getCompanyId());
		patientImpl.setUserId(getUserId());
		patientImpl.setUserName(getUserName());
		patientImpl.setCreateDate(getCreateDate());
		patientImpl.setModifiedDate(getModifiedDate());
		patientImpl.setConfirmingUserId(getConfirmingUserId());
		patientImpl.setConfirmingUserName(getConfirmingUserName());
		patientImpl.setIsConfirmed(getIsConfirmed());
		patientImpl.setName(getName());
		patientImpl.setSurname(getSurname());
		patientImpl.setMiddleName(getMiddleName());
		patientImpl.setPesel(getPesel());
		patientImpl.setIdNumber(getIdNumber());
		patientImpl.setIdImage(getIdImage());
		patientImpl.setBirthDate(getBirthDate());
		patientImpl.setSex(getSex());
		patientImpl.setAddress(getAddress());
		patientImpl.setCityName(getCityName());
		patientImpl.setBloodType(getBloodType());

		patientImpl.resetOriginalValues();

		return patientImpl;
	}

	@Override
	public int compareTo(Patient patient) {
		long primaryKey = patient.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Patient)) {
			return false;
		}

		Patient patient = (Patient)obj;

		long primaryKey = patient.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PatientModelImpl patientModelImpl = this;

		patientModelImpl._originalUserId = patientModelImpl._userId;

		patientModelImpl._setOriginalUserId = false;

		patientModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Patient> toCacheModel() {
		PatientCacheModel patientCacheModel = new PatientCacheModel();

		patientCacheModel.patientId = getPatientId();

		patientCacheModel.groupId = getGroupId();

		patientCacheModel.companyId = getCompanyId();

		patientCacheModel.userId = getUserId();

		patientCacheModel.userName = getUserName();

		String userName = patientCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			patientCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			patientCacheModel.createDate = createDate.getTime();
		}
		else {
			patientCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			patientCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			patientCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		patientCacheModel.confirmingUserId = getConfirmingUserId();

		patientCacheModel.confirmingUserName = getConfirmingUserName();

		String confirmingUserName = patientCacheModel.confirmingUserName;

		if ((confirmingUserName != null) && (confirmingUserName.length() == 0)) {
			patientCacheModel.confirmingUserName = null;
		}

		patientCacheModel.isConfirmed = getIsConfirmed();

		patientCacheModel.name = getName();

		String name = patientCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			patientCacheModel.name = null;
		}

		patientCacheModel.surname = getSurname();

		String surname = patientCacheModel.surname;

		if ((surname != null) && (surname.length() == 0)) {
			patientCacheModel.surname = null;
		}

		patientCacheModel.middleName = getMiddleName();

		String middleName = patientCacheModel.middleName;

		if ((middleName != null) && (middleName.length() == 0)) {
			patientCacheModel.middleName = null;
		}

		patientCacheModel.pesel = getPesel();

		patientCacheModel.idNumber = getIdNumber();

		String idNumber = patientCacheModel.idNumber;

		if ((idNumber != null) && (idNumber.length() == 0)) {
			patientCacheModel.idNumber = null;
		}

		patientCacheModel.idImage = getIdImage();

		String idImage = patientCacheModel.idImage;

		if ((idImage != null) && (idImage.length() == 0)) {
			patientCacheModel.idImage = null;
		}

		Date birthDate = getBirthDate();

		if (birthDate != null) {
			patientCacheModel.birthDate = birthDate.getTime();
		}
		else {
			patientCacheModel.birthDate = Long.MIN_VALUE;
		}

		patientCacheModel.sex = getSex();

		String sex = patientCacheModel.sex;

		if ((sex != null) && (sex.length() == 0)) {
			patientCacheModel.sex = null;
		}

		patientCacheModel.address = getAddress();

		String address = patientCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			patientCacheModel.address = null;
		}

		patientCacheModel.cityName = getCityName();

		String cityName = patientCacheModel.cityName;

		if ((cityName != null) && (cityName.length() == 0)) {
			patientCacheModel.cityName = null;
		}

		patientCacheModel.bloodType = getBloodType();

		String bloodType = patientCacheModel.bloodType;

		if ((bloodType != null) && (bloodType.length() == 0)) {
			patientCacheModel.bloodType = null;
		}

		return patientCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{patientId=");
		sb.append(getPatientId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", confirmingUserId=");
		sb.append(getConfirmingUserId());
		sb.append(", confirmingUserName=");
		sb.append(getConfirmingUserName());
		sb.append(", isConfirmed=");
		sb.append(getIsConfirmed());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", surname=");
		sb.append(getSurname());
		sb.append(", middleName=");
		sb.append(getMiddleName());
		sb.append(", pesel=");
		sb.append(getPesel());
		sb.append(", idNumber=");
		sb.append(getIdNumber());
		sb.append(", idImage=");
		sb.append(getIdImage());
		sb.append(", birthDate=");
		sb.append(getBirthDate());
		sb.append(", sex=");
		sb.append(getSex());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", cityName=");
		sb.append(getCityName());
		sb.append(", bloodType=");
		sb.append(getBloodType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("tul.salutem.entity.model.Patient");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>patientId</column-name><column-value><![CDATA[");
		sb.append(getPatientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmingUserId</column-name><column-value><![CDATA[");
		sb.append(getConfirmingUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmingUserName</column-name><column-value><![CDATA[");
		sb.append(getConfirmingUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isConfirmed</column-name><column-value><![CDATA[");
		sb.append(getIsConfirmed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surname</column-name><column-value><![CDATA[");
		sb.append(getSurname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>middleName</column-name><column-value><![CDATA[");
		sb.append(getMiddleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pesel</column-name><column-value><![CDATA[");
		sb.append(getPesel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idNumber</column-name><column-value><![CDATA[");
		sb.append(getIdNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idImage</column-name><column-value><![CDATA[");
		sb.append(getIdImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthDate</column-name><column-value><![CDATA[");
		sb.append(getBirthDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sex</column-name><column-value><![CDATA[");
		sb.append(getSex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityName</column-name><column-value><![CDATA[");
		sb.append(getCityName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bloodType</column-name><column-value><![CDATA[");
		sb.append(getBloodType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Patient.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Patient.class
		};
	private long _patientId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _confirmingUserId;
	private String _confirmingUserUuid;
	private String _confirmingUserName;
	private boolean _isConfirmed;
	private String _name;
	private String _surname;
	private String _middleName;
	private int _pesel;
	private String _idNumber;
	private String _idImage;
	private Date _birthDate;
	private String _sex;
	private String _address;
	private String _cityName;
	private String _bloodType;
	private long _columnBitmask;
	private Patient _escapedModel;
}